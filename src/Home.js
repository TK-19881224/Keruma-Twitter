import React, { useState, useEffect, useContext } from 'react';
import { PostContext } from './PostContext';
import { auth } from './FireBase';
import { onAuthStateChanged } from 'firebase/auth';
import { useNavigate } from 'react-router-dom';
import { db } from './FireBase';
import { collection, getDocs, doc, getDoc, addDoc, deleteDoc, updateDoc, query, orderBy, serverTimestamp } from 'firebase/firestore';
import './index.css';
import Header from './Header';
import { recordPageView } from './recordPageView';
import ShareButtons from "./ShareButtons";

function Home({ user, setUser }) {
  const [activeTab, setActiveTab] = useState("posts");
  const navigate = useNavigate();
  const { posts, setPosts } = useContext(PostContext);
  const [profileName, setProfileName] = useState('');
  const [profilePhotoURL, setProfilePhotoURL] = useState('');
  const [showPostForm, setShowPostForm] = useState(false);
  const [loading, setLoading] = useState(true); // üîç „É≠„Éº„Éá„Ç£„É≥„Ç∞ÁÆ°ÁêÜËøΩÂä†
  const baseUrl = window.location.origin;

  const title = "Keruma SNS„ÅßÈù¢ÁôΩ„ÅÑÊäïÁ®ø„ÇíË¶ã„Å§„Åë„Åæ„Åó„ÅüÔºÅ";

  useEffect(() => {
    const unsub = onAuthStateChanged(auth, (currentUser) => {
      setUser(currentUser);

      if (currentUser) {
        (async () => {
          try {
            const profileDoc = await getDoc(doc(db, 'users', currentUser.uid));
            if (profileDoc.exists()) {
              const data = profileDoc.data();
              setProfileName(data.name || currentUser.displayName || 'ÂåøÂêç');
              setProfilePhotoURL(data.photoURL || currentUser.photoURL || '');
            }
          } catch (err) {
            console.warn("„Éó„É≠„Éï„Ç£„Éº„É´ÊÉÖÂ†±„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü", err);
          }
        })();
      }
    });
    return () => unsub();
  }, []);

  // üëá ËøΩÂä†: „Éá„Éê„ÉÉ„Ç∞Ë°®Á§∫Áî®
  const [debugInfo, setDebugInfo] = useState('„Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±Êú™ÂèñÂæó');

  useEffect(() => {
    const fetchPosts = async () => {
      try {
        const postsCollection = collection(db, 'posts');
        const q = query(postsCollection, orderBy("time", "desc"));
        const snapshot = await getDocs(q);

        // ‚úÖ „Éá„Éê„ÉÉ„Ç∞: ÂèñÂæó‰ª∂Êï∞Á¢∫Ë™ç
        setDebugInfo(`FirestoreÊäïÁ®ø‰ª∂Êï∞: ${snapshot.size} ‰ª∂`);

        const postsData = await Promise.all(snapshot.docs.map(async (docSnap) => {
          const postData = docSnap.data();

          // Firestore Timestamp„Åã„ÇâDate„Å∏Â§âÊèõ„Åô„ÇãÂÆâÂÖ®„Å™Êõ∏„ÅçÊñπ
          const time = postData.time && postData.time.toDate ? postData.time.toDate() : null;

          const userDoc = await getDoc(doc(db, 'users', postData.uid));
          const commentsSnapshot = await getDocs(collection(db, "posts", docSnap.id, "comments"));
          const commentCount = commentsSnapshot.size;

          let nameFromUserCollection = postData.displayName;
          let profilePhotoURL = postData.photoURL || '';

          if (userDoc.exists()) {
            const userData = userDoc.data();
            nameFromUserCollection = userData.name || nameFromUserCollection;
            profilePhotoURL = userData.photoURL || profilePhotoURL;
          }

          return {
            id: docSnap.id,
            uid: postData.uid,
            text: postData.text || '',
            likes: postData.likes ?? 0,
            imageUrl: postData.imageUrl || '',
            videoUrl: postData.videoUrl || '',
            displayName: nameFromUserCollection || 'ÂåøÂêç',
            photoURL: profilePhotoURL || '/default-icon.png',
            commentCount: commentCount ?? 0,
            draftComment: '',
            time, // ‚Üê Â§âÊèõÊ∏à„Åø„ÅÆDate„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà
          };
        }));

        setPosts(postsData);

        // ‚úÖ „Éá„Éê„ÉÉ„Ç∞: postsData„ÇíÊñáÂ≠óÂàó„ÅßË°®Á§∫
        setDebugInfo(prev => prev + `\nË™≠„ÅøËæº„ÅøÊàêÂäü: ${postsData.length} ‰ª∂„ÅÆÊäïÁ®ø„ÇíÂèñÂæó`);
        setLoading(false); // ‚úÖ ËøΩÂä†ÔºÅ
      } catch (err) {
        setDebugInfo(`‚ùå ÊäïÁ®øÂèñÂæó„Ç®„É©„Éº: ${err.message}`);
        console.error("Error getting posts:", err);
      }
    };

    fetchPosts();
  }, [setPosts]);

  const handleLike = async () => {
    // „ÅÑ„ÅÑ„Å≠Âá¶ÁêÜÔºà‰æãÔºöÊäïÁ®ø„ÅÆlikesÈÖçÂàó„Å´uid„ÇíËøΩÂä†„Å™„Å©Ôºâ

    // ÈÄöÁü•„ÇíÈÄÅ„Çã
    await sendLikeNotification({
      toUserId: postOwnerId,
      fromUserId: currentUserId,
      postId: currentPostId,
    });
  };

  const updated = [...posts];
  updated[index].likes += 1;
  setPosts(updated);

  const likedPost = posts[index];


  try {
    await updateDoc(doc(db, 'posts', likedPost.id), {
      likes: updated[index].likes
    });

    if (likedPost.uid !== user.uid) {
      await addDoc(collection(db, "notifications"), {
        toUserId: likedPost.uid,
        fromUserId: user.uid,
        type: "like",
        postId: likedPost.id,
        message: `${profileName}„Åï„Çì„Åå„ÅÇ„Å™„Åü„ÅÆÊäïÁ®ø„Å´„ÅÑ„ÅÑ„Å≠„Åó„Åæ„Åó„Åü ‚ù§Ô∏è`,
        read: false,
        createdAt: serverTimestamp()
      });
    }
  } catch (err) {
    console.error("„ÅÑ„ÅÑ„Å≠Âá¶ÁêÜ„Åæ„Åü„ÅØÈÄöÁü•‰ΩúÊàê„Åß„Ç®„É©„Éº:", err);
  }
};

const handleDelete = async (index) => {
  const postToDelete = posts[index];
  if (!postToDelete?.id) return;

  try {
    await deleteDoc(doc(db, 'posts', postToDelete.id));
    setPosts(posts.filter((_, i) => i !== index));
  } catch (err) {
    console.error("ÂâäÈô§Â§±Êïó:", err);
  }
};

const handleAddComment = async (postIndex, commentText) => {
  const post = posts[postIndex];
  if (!post?.id || !user) return;

  const comment = {
    text: commentText,
    createdAt: new Date(),
    userId: user.uid,
    userName: profileName,
  };

  try {
    await addDoc(collection(db, "posts", post.id, "comments"), comment);
    const updatedPosts = [...posts];
    updatedPosts[postIndex].commentCount = (updatedPosts[postIndex].commentCount || 0) + 1;
    updatedPosts[postIndex].draftComment = '';
    setPosts(updatedPosts);
  } catch (err) {
    console.error("„Ç≥„É°„É≥„Éà„ÅÆ‰øùÂ≠ò„Å´Â§±Êïó:", err);
  }
};

useEffect(() => {
  recordPageView();
}, []);

return (
  <div className="bg-white min-h-screen">
    <div className="max-w-4xl mx-auto bg-gradient-to-br from-blue-200 via-blue-100 to-white p-8 font-sans pt-20">
      <Header
        profilePhotoURL={profilePhotoURL}
        profileName={profileName}
        user={user}
        setUser={setUser}
        onPostClick={() => setShowPostForm(!showPostForm)}
        activeTab={activeTab}
        setActiveTab={setActiveTab}
      />

      <div className="bg-white p-4 rounded-lg shadow-md mb-4 mt-6">
        <h2>ÊäïÁ®ø‰∏ÄË¶ß</h2>
        {loading ? (
          <p>Ë™≠„ÅøËæº„Åø‰∏≠...</p>
        ) : posts.length === 0 ? (
          <p>ÊäïÁ®ø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</p>
        ) : (
          posts.map((post, index) => (
            <div key={post.id} className="p-4 border-b border-gray-300 hover:bg-gray-100 transition duration-200 rounded-md">
              <div className="flex items-center mb-2">
                <div
                  className="flex items-center cursor-pointer text-blue-500"
                  onClick={() => post.uid && navigate(`/profile/${post.uid}`)}
                >
                  <img
                    src={post.photoURL || "/default-icon.png"}
                    alt="„Ç¢„Ç§„Ç≥„É≥"
                    className='w-8 h-8 rounded-full inline-block mr-2'
                  />
                  <p className="font-semibold text-sm">{post.displayName}</p>
                </div>
              </div>

              <div
                className="cursor-pointer"
                onClick={() => navigate(`/post/${post.id}`)}
              >
                <p className="mb-2">{post.text}</p>
                {post.imageUrl && (
                  <img src={post.imageUrl} alt="ÊäïÁ®øÁîªÂÉè" className="rounded-md max-w-full mb-2" />
                )}
                {post.videoUrl && (
                  <video controls className="rounded-md max-w-full mb-2">
                    <source src={post.videoUrl} type="video/mp4" />
                    „Åä‰Ωø„ÅÑ„ÅÆ„Éñ„É©„Ç¶„Ç∂„ÅØ video „Çø„Ç∞„Çí„Çµ„Éù„Éº„Éà„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ
                  </video>
                )}
                <p className="text-xs text-gray-500 mb-2">
                  {post.time ? post.time.toLocaleString() : 'Êó•ÊôÇ‰∏çÊòé'}
                </p>
                <div className="flex space-x-4 mt-2">
                  <button
                    onClick={(event) => {
                      event.stopPropagation();
                      handleLike(index);
                    }}
                    className="bg-blue-500 text-white px-4 py-2 rounded-2xl hover:bg-blue-600 transition duration-200 shadow-md"
                  >
                    ‚ù§Ô∏è {post.likes}
                  </button>
                  <button
                    onClick={(event) => {
                      event.stopPropagation();
                      handleDelete(index);
                    }}
                    className="bg-blue-500 text-white px-4 py-2 rounded-2xl hover:bg-blue-600 transition duration-200 shadow-md"
                  >
                    üóëÔ∏è
                  </button>

                  <div style={{ marginTop: '1rem' }}>
                    <p className="text-sm text-gray-600">
                      „Ç≥„É°„É≥„ÉàÊï∞: {post.commentCount || 0}
                    </p>
                  </div>

                  <ShareButtons
                    url={`${baseUrl}/post/${post.id}`}
                    title={`Keruma SNS„ÅßÈù¢ÁôΩ„ÅÑÊäïÁ®ø„ÇíË¶ã„Å§„Åë„Åæ„Åó„ÅüÔºÅ„Äå${post.text.slice(0, 30)}...„Äç`}
                  />
                </div>

                {(index + 1) % 3 === 0 && (
                  <div className="p-4 my-4 bg-gray-100 border text-center">
                    <p className="font-bold">„Çπ„Éù„É≥„Çµ„Éº„É™„É≥„ÇØ</p>
                    <a href="https://qiita.com/Tomomitsu_Keruma" target="_blank" rel="noopener noreferrer">
                      <img src="/Qiita_keruma_image.png" alt="Â∫ÉÂëä" className="mx-auto max-w-full h-auto" />
                    </a>
                  </div>
                )}
              </div>
            </div>
          ))
        )}
      </div>
    </div>
  </div>
);
}

export default Home;